openapi: 3.1.0
info:
  title: test API
  version: "0.1"
  description: test
  license:
    name: apache 2
    url: "https://apache.org/licenses/LICENSE-2.0"
servers:
  - url: "https://localhost:8086"
    description: local dev server
security:
  - bearerAuth: []
paths:
  "/v3/entities":
    get:
      summary: list entities
      operationId: list-v3-entities
      description: >-
        Retrieves a paginated list of all entities registered under the authenticated entity.
      parameters:
        - $ref: "../common.yaml#/components/parameters/limit"
        - $ref: "../common.yaml#/components/parameters/starting_after"
        - $ref: "../common.yaml#/components/parameters/ending_before"
      tags:
        - entities
      x-permissions:
        - 'entity:list'
      responses:
        "200":
          $ref: '#/components/responses/entity-list'
        "400":
          $ref: "../common.yaml#/components/responses/bad-request"
        "401":
          $ref: "../common.yaml#/components/responses/unauthorized"
        "404":
          $ref: "../common.yaml#/components/responses/not-found"
        "429":
          $ref: "../common.yaml#/components/responses/too-many-requests"
        "500":
          $ref: "../common.yaml#/components/responses/internal-server-error"
    post:
      summary: create a entity
      operationId: post-v3-entities
      description: >-
        Creates a new entity.
        This endpoint handles both individual and corporate entity types, along with all required identification and address information.
        Entities are stored in a tree, so the parent_entity_id is used to establish relationships between entities. You can create multiple levels of entities,
        allowing for complex organizational structures.
      tags:
        - entities
      x-permissions:
        - 'entity:create'
      requestBody:
        $ref: "#/components/requestBodies/create-entity"
      responses:
        "201":
          $ref: '#/components/responses/entity-response'
        "400":
          $ref: "../common.yaml#/components/responses/bad-request"
        "401":
          $ref: "../common.yaml#/components/responses/unauthorized"
        "404":
          $ref: "../common.yaml#/components/responses/not-found"
        "409":
          $ref: "../common.yaml#/components/responses/conflict"
        "429":
          $ref: "../common.yaml#/components/responses/too-many-requests"
        "500":
          $ref: "../common.yaml#/components/responses/internal-server-error"
      parameters:
        - $ref: "../common.yaml#/components/parameters/X-Idempotency-Key"
  "/v3/entities/{entity-id}":
    parameters:
      - name: entity-id
        description: entity id
        in: path
        required: true
        schema:
          $ref: "../common.yaml#/components/schemas/EntityID"
    get:
      summary: get entity
      description: >-
        Retrieves detailed information about a specific entity by their unique identifier.
      tags:
        - entities
      x-permissions:
        - 'entity:get'
      responses:
        "200":
          $ref: '#/components/responses/entity-response'
        "400":
          $ref: "../common.yaml#/components/responses/bad-request"
        "401":
          $ref: "../common.yaml#/components/responses/unauthorized"
        "404":
          $ref: "../common.yaml#/components/responses/not-found"
        "429":
          $ref: "../common.yaml#/components/responses/too-many-requests"
        "500":
          $ref: "../common.yaml#/components/responses/internal-server-error"
      operationId: get-v3-entity
    put:
      summary: update entity details
      description: >-
        Updates the information of a specific entity.
        This endpoint allows entities to modify their personal or corporate information, contact details, and other KYC data.
      tags:
        - entities
      operationId: put-v3-entity
      x-permissions:
        - 'entity:update'
      requestBody:
        $ref: "#/components/requestBodies/update-entity"
      responses:
        "200":
          $ref: '#/components/responses/entity-response'
        "400":
          $ref: "../common.yaml#/components/responses/bad-request"
        "401":
          $ref: "../common.yaml#/components/responses/unauthorized"
        "404":
          $ref: "../common.yaml#/components/responses/not-found"
        "409":
          $ref: "../common.yaml#/components/responses/conflict"
        "429":
          $ref: "../common.yaml#/components/responses/too-many-requests"
        "500":
          $ref: "../common.yaml#/components/responses/internal-server-error"
    delete:
      summary: delete entity
      description: >-
        Deletes a entity entity from the system.
        This endpoint is used to permanently remove all entity information when an account is closed or for compliance with data privacy regulations like GDPR's "right to be forgotten".
        A entity can only be deleted if they have no active accounts or pending transactions.
        This operation is irreversible.
      tags:
        - entities
      operationId: delete-v3-entity
      x-permissions:
        - 'entity:delete'
      responses:
        "204":
          $ref: "../common.yaml#/components/responses/no-content"
        "400":
          $ref: "../common.yaml#/components/responses/bad-request"
        "401":
          $ref: "../common.yaml#/components/responses/unauthorized"
        "404":
          $ref: "../common.yaml#/components/responses/not-found"
        "409":
          $ref: "../common.yaml#/components/responses/conflict"
        "429":
          $ref: "../common.yaml#/components/responses/too-many-requests"
        "500":
          $ref: "../common.yaml#/components/responses/internal-server-error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: This security scheme uses a Bearer Token for authentication. Clients must include the token in the `Authorization` header of their requests in the format `Bearer <token>`. The token is used to authenticate and authorize access to protected resources.
  schemas:
    CreateEntity:
      description: Create a entity
      oneOf:
        - $ref: "#/components/schemas/CreateEntityIndividual"
        - $ref: "#/components/schemas/CreateEntityCorporate"
      discriminator:
        propertyName: entity_type
        mapping:
          individual: "#/components/schemas/CreateEntityIndividual"
          corporate: "#/components/schemas/CreateEntityCorporate"
    CreateEntityIndividual:
      title: CreateEntityIndividual
      description: Create a entity individual
      type: object
      required:
        - entity_type
        - parent_entity_id
        - first_name
        - last_name
      properties:
        entity_type:
          type: string
          enum:
            - individual
        parent_entity_id:
          $ref: "../common.yaml#/components/schemas/EntityID"
        email:
          $ref: "../common.yaml#/components/schemas/Email"
        first_name:
          type: string
          example: John
          maxLength: 100
          pattern: "^[A-Za-z\\s\\-\\.']+"
        last_name:
          type: string
          example: Doe
          maxLength: 100
          pattern: "^[A-Za-z\\s\\-\\.']+"
        street:
          type: string
          example: 1 rue de la bourse
          maxLength: 255
          pattern: "^[\\p{L}\\p{N}\\s\\.,\\-#'\"/()]+$"
        city:
          $ref: '../common.yaml#/components/schemas/PermissiveString'
        postal_code:
          $ref: '../common.yaml#/components/schemas/PermissiveString'
        country:
          $ref: "../country.yaml#/components/schemas/CountryCode2"
        nationality:
          $ref: "../country.yaml#/components/schemas/CountryCode2"
        birth_country:
          $ref: "../country.yaml#/components/schemas/CountryCode2"
        birth_date:
          $ref: "../common.yaml#/components/schemas/Date"
        birth_place:
          $ref: '../common.yaml#/components/schemas/PermissiveString'
    CreateEntityCorporate:
      title: CreateEntityCorporate
      description: Create a entity corporate
      type: object
      required:
        - entity_type
        - parent_entity_id
        - company_name
      properties:
        entity_type:
          type: string
          enum:
            - corporate
        parent_entity_id:
          $ref: "../common.yaml#/components/schemas/EntityID"
        email:
          $ref: "../common.yaml#/components/schemas/Email"
        street:
          type: string
          example: "Blk 447 Clementi Ave 3 #01-201 S()"
          maxLength: 100
          pattern: '^[a-zA-Z0-9\s,#\-().]+$'
        city:
          type: string
          example: singapore
          maxLength: 50
          pattern: '^[a-zA-Z\s\-]+$'
        postal_code:
          type: string
          example: "120447"
          maxLength: 10
          pattern: '^[0-9A-Za-z\-]+$'
        country:
          $ref: "../country.yaml#/components/schemas/CountryCode2"
        company_name:
          type: string
          example: Wisoky - Berge
          maxLength: 100
          pattern: '^[a-zA-Z0-9\s\-&,\.]+$'
        registration_country:
          $ref: "../country.yaml#/components/schemas/CountryCode2"
        incorporation_date:
          $ref: "../common.yaml#/components/schemas/Date"
  responses:
    entity-response:
      description: Entity details
      headers:
        X-RateLimit-Limit:
          $ref: '../common.yaml#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '../common.yaml#/components/headers/X-RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: '../common.yaml#/components/headers/X-RateLimit-Reset'
        Retry-After:
          $ref: '../common.yaml#/components/headers/Retry-After'
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "../common.yaml#/components/schemas/IndividualEntity"
              - $ref: "../common.yaml#/components/schemas/CorporateEntity"
    entity-list:
      description: List of entities
      headers:
        X-RateLimit-Limit:
          $ref: '../common.yaml#/components/headers/X-RateLimit-Limit'
        X-RateLimit-Remaining:
          $ref: '../common.yaml#/components/headers/X-RateLimit-Remaining'
        X-RateLimit-Reset:
          $ref: '../common.yaml#/components/headers/X-RateLimit-Reset'
        Retry-After:
          $ref: '../common.yaml#/components/headers/Retry-After'
      content:
        application/json:
          schema:
            required:
              - has_more
              - data
            properties:
              has_more:
                type: boolean
                example: true
              data:
                type: array
                maxItems: 2000
                items:
                  $ref: "../common.yaml#/components/schemas/Entity"
                  
  requestBodies:
    create-entity:
      description: Entity creation payload
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateEntity"
    update-entity:
      description: Entity update payload
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/CreateEntity"
              - type: object
                properties:
                  id:
                    $ref: "../common.yaml#/components/schemas/EntityID"
  parameters:
    holder-entity-id-optional:
      name: holder_entity_id
      required: false
      in: query
      description: The ID of the entity that owns the account
      schema:
        $ref: "../common.yaml#/components/schemas/EntityID"
    owner-entity-id-optional:
      name: owner_entity_id
      required: false
      in: query
      description: The ID of the owner entity
      schema:
        $ref: "../common.yaml#/components/schemas/EntityID"
tags:
  - name: entities
    description: Operations related to entity management
  - name: accounts
    description: Operations related to accounts
  - name: wallet accounts
    description: Operations related to wallet accounts (IBAN, etc)
  - name: deposit accounts
    description: Operations related to deposit accounts
  - name: internal transfers
    description: Operations related to internal transfers
  - name: payins
    description: Operations related to paying in to accounts
  - name: payouts
    description: Operations related to paying out from accounts
  - name: recipients
    description: Operations related to recipients
  - name: recipient accounts
    description: Operations related to recipient accounts
  - name: transfers
    description: Operations related to transfers between external accounts
  - name: capabilities
    description: Operations related to capabilities which have specific requirements
  - name: notifications
    description: |
      The notifications API allows an entity to manage its subscriptions to events and their recipients.
      A subscription requires a recipient (email or webhook URL), an event type to subscribe to and optionally a template to use for customizing the notification; a default template is used if none is specified.

      To subscribe an event for email notifications:
        - Create an email recipient: <b>POST /v3/notifications/{entity-id}/emails</b>
        - Create a subscription for the <b>event_type</b> using the returned ID: <b>PUT /v3/notifications/{entity-id}/subscriptions</b>

      To subscribe an event for webhook notifications:
        - Create a webhook recipient: <b>POST /v3/notifications/{entity-id}/webhooks</b>
        - Create a subscription for the <b>event_type</b> using the returned ID: <b>PUT /v3/notifications/{entity-id}/subscriptions</b>
        - If the chosen signing method is hmac_sha256 and a signing key is not already created, create a signing key to allow webhook signing: <b>PUT /v3/notifications/{entity-id}/webhooks/keys/{method}</b>.  The key will be used to sign for all webhook payloads.
  - name: sandbox
    description: Operations related to sandbox testing and capabilities
